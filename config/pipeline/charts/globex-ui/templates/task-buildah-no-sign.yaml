apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah-no-sign
spec:
  description: 'Buildah task builds source into a container image and then pushes
    it to a container registry.  Does not set result parameters to bypass signing.
    Buildah Task builds source into a container image using Project Atomic''s Buildah
    build tool.It uses Buildah''s support for building from Dockerfiles, using its
    buildah bud command.This command executes the directives in the Dockerfile to
    assemble a container image, then pushes that image to a container registry.    '
  params:
  - description: Reference of the image buildah will produce.
    name: IMAGE
    type: string
  - default: registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe
    description: The location of the buildah builder image.
    name: BUILDER_IMAGE
    type: string
  - default: vfs
    description: Set buildah storage driver
    name: STORAGE_DRIVER
    type: string
  - default: ./Dockerfile
    description: Path to the Dockerfile to build.
    name: DOCKERFILE
    type: string
  - default: .
    description: Path to the directory to use as context.
    name: CONTEXT
    type: string
  - default: "true"
    description: 'Verify the TLS on the registry endpoint (for push/pull to a non-TLS
      registry)        '
    name: TLSVERIFY
    type: string
  - default: oci
    description: The format of the built container, oci or docker
    name: FORMAT
    type: string
  - default: ""
    description: Extra parameters passed for the build command when building images.
    name: BUILD_EXTRA_ARGS
    type: string
  - default: ""
    description: Extra parameters passed for the push command when pushing images.
    name: PUSH_EXTRA_ARGS
    type: string
  - default: "false"
    description: Skip pushing the built image
    name: SKIP_PUSH
    type: string
  steps:
  - image: $(params.BUILDER_IMAGE)
    name: build-and-push
    script: "buildah --storage-driver=$(params.STORAGE_DRIVER) bud \\\n  $(params.BUILD_EXTRA_ARGS)
      --format=$(params.FORMAT) \\\n  --tls-verify=$(params.TLSVERIFY) --no-cache
      \\\n  -f $(params.DOCKERFILE) -t $(params.IMAGE) $(params.CONTEXT)\n[[ \"$(params.SKIP_PUSH)\"
      == \"true\" ]] && echo \"Push skipped\" && exit 0\nif [[ \"$(workspaces.dockerconfig.bound)\"
      == \"true\" ]]; then\n  # if config.json exists at workspace root, we use that\n
      \ if test -f \"$(workspaces.dockerconfig.path)/config.json\"; then\n    export
      DOCKER_CONFIG=\"$(workspaces.dockerconfig.path)\"\n  # else we look for .dockerconfigjson
      at the root\n  elif test -f \"$(workspaces.dockerconfig.path)/.dockerconfigjson\";
      then\n    cp \"$(workspaces.dockerconfig.path)/.dockerconfigjson\" \"$HOME/.docker/config.json\"\n
      \   export DOCKER_CONFIG=\"$HOME/.docker\"\n  # need to error out if neither
      files are present\n  else\n    echo \"neither 'config.json' nor '.dockerconfigjson'
      found at workspace root\"\n    exit 1\n  fi\nfi\nbuildah --storage-driver=$(params.STORAGE_DRIVER)
      push \\\n  $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \\\n  --digestfile
      /tmp/image-digest $(params.IMAGE) \\\n  docker://$(params.IMAGE)        \n"
    securityContext:
      capabilities:
        add:
        - SETFCAP
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.source.path)
  volumes:
  - name: varlibcontainers
  workspaces:
  - name: source
  - description: 'An optional workspace that allows providing a .docker/config.json
      file for Buildah to access the container registry. The file should be placed
      at the root of the Workspace with name config.json or .dockerconfigjson.        '
    name: dockerconfig
    optional: true
